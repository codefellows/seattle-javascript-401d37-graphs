package graphs;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */


import java.util.HashSet;
import java.util.Set;

public class DirectionalGraph {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) throws Exception{
        System.out.println(new App().getGreeting());

        Graph friends = new Graph();
        friends.addNode("Nicholas");
        friends.addNode("Ginger");
        friends.addNode("Snowdrop");
        friends.addNode("Rufus");

        friends.addEdge("Nicholas", "Ginger");
        friends.addEdge("Nicholas", "Snowdrop");
        friends.addEdge("Nicholas", "Rufus");
        friends.addEdge("Rufus", "Ginger");

        System.out.println(friends);

        Graph cliques = new Graph();
        cliques.addNode("Gretchen Weiners");
        cliques.addNode("Karen Smith");
        cliques.addNode("Regina George");
        cliques.addNode("Katy Heron");

        cliques.addEdge("Gretchen Weiners", "Karen Smith");
        cliques.addEdge("Gretchen Weiners", "Regina George");
        cliques.addEdge("Karen Smith", "Regina George");

        System.out.println(cliques);

        Graph codefellows = new Graph();
        codefellows.addNode("Jeff");
        codefellows.addNode("Mitch");
        codefellows.addNode("Brook");
        codefellows.addNode("Brian");
        codefellows.addNode("Nicholas");
        codefellows.addNode("JB");

        codefellows.addEdge("Jeff", "Mitch");
        codefellows.addEdge("Jeff", "Brook");
        codefellows.addEdge("Brook", "Brian");
        codefellows.addEdge("Brian", "Nicholas");
        codefellows.addEdge("Brian", "JB");

        System.out.println(codefellows);

    }

    public static class Graph {
        public HashSet<Node> vertexes = new HashSet<>();

        public Graph(){}

        public String toString(){
            StringBuilder output = new StringBuilder();
            // Nicholas | Ginger, Snowdrop, Rufus \n
            for(Node vertex : vertexes){
                output.append(vertex.value);
                output.append(" | ");
                for(Node neighbor : vertex.getNeighbors()){
                    output.append(String.format("%s, ", neighbor.value));
                }
                output.append("\n");
            }
            return output.toString();
            // Snowdrop | Nicholas
            // Ginger | Nicholas, Rufus
        }

        public int addNode(String value){ // data structure's public methods should not talk about Nodes or require them
            Node newNode = new Node(value);
            vertexes.add(newNode);
            return vertexes.size();
        }

        public void addEdge(String one, String two) throws Exception {
            Node origin = null;
            Node destination = null;
            for(Node node : vertexes){
                if(node.value.equals(one)){
                    origin = node;
                }
                if(node.value.equals(two)){
                    destination = node;
                }
            }

            if(origin == null || destination == null){
                throw new Exception("that node is not there");
            }

            Edge edge = new Edge(origin, destination);
            origin.addEdge(edge); // hey Vertex one, you need to keep track of who you know

            // TODO: remove adding the edge to destination to turn it into a directed graph

        }



    }

    public static class Node {
        public String value;
        HashSet<Edge> neighbors = new HashSet<>();

        public Node(String value){
            this.value = value;
        }

        public void addEdge(Edge edge){
            this.neighbors.add(edge);
        }

        public HashSet<Node> getNeighbors(){
            HashSet<Node> allMyUniqueNeighbors = new HashSet<>();
            for(Edge edge : neighbors){
                if(!edge.origin.equals(this)){ // If the node stored in this edge is not me, it is my neighbor
                    allMyUniqueNeighbors.add(edge.origin);
                }
                if(!edge.destination.equals(this)){
                    // samesies, because every edge has me and another node, but I don;t know whether the first or second is actually me
                    allMyUniqueNeighbors.add(edge.destination);
                }
            }
            return allMyUniqueNeighbors;
        }
    }

    public static class Edge {
        Node origin;
        Node destination;

        public Edge(Node origin, Node destination) {
            this.origin = origin;
            this.destination = destination;
        }
    }
}


